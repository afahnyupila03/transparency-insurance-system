#!/usr/bin/env node

import http from 'http'
import debugLib from 'debug'
import app from '../app.js'
import seedPolicyRates from '../seed/seedPolicyRates.js' // <-- Import the seeding function

const debug = debugLib('api:server')
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

async function startServer () {
  try {
    // Seed only if needed (optional logic)
    await seedPolicyRates()

    // Start server AFTER seeding
    const server = http.createServer(app)
    server.listen(port)
    server.on('error', onError)
    server.on('listening', () => onListening(server))
  } catch (error) {
    console.error('❌ Failed to start server:', error)
    process.exit(1)
  }
}

startServer()

function normalizePort (val) {
  const parsedPort = parseInt(val, 10)
  if (isNaN(parsedPort)) return val
  if (parsedPort >= 0) return parsedPort
  return false
}

function onError (error) {
  if (error.syscall !== 'listen') throw error

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
    default:
      throw error
  }
}

function onListening (server) {
  const addr = server.address()
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`
  debug(`✅ Server is running on ${bind}`)
}
